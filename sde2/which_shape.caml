(* which_shape.caml *)

open List;;

(* 3.1 *)
let rec gen_string (len,what) = 
    if len = 0 then []
    else what::gen_string ((len-1),what);;

(* 3.2 *)
let gen_square(len) = 
    gen_string(len,"u")@
    gen_string(len,"r")@
    gen_string(len,"d")@
    gen_string(len,"l");;

(* 3.3 *)
let rec gen_rect(n,m) = 
    gen_string(n,"u")@
    gen_string(m,"r")@
    gen_string(n,"d")@
    gen_string(m,"l");;

(* 3.4 *)
let rec countups(list,counter)=
    if List.length list = 0 then counter
    else 
        if List.nth list 0 = "u" then countups(List.tl list,counter+1)
        
        else countups(List.tl list,counter);;

(* 3.5 *)
let rec consec_counts(list,counter,what)=
    if List.length list = 0 then list,counter
    else 
        if List.nth list 0 = what then consec_counts(List.tl list,counter+1,what)
        
        else list,counter;;

(* 4.1 *)
(*
let rec sq_helper(list,l1,l2,l3,l4) = 
   if (l1>0 && l2 >0 && l3>0 && l4 >0) then 
          true
   else if (List.nth list 0 = "u" && l1 = 0) then
          count_helper(list, 0,"u")


and count_helper(list, lens, what) = 
   consec_counts(list,lens,what),
   if (lens > 0) then true;;
let sq(list) = 
    sq_helper(list,0,0,0,0);;

 *)



(* 4.5 *)
let one_shift (list) =
    match list with
    | []  -> []
    | hd::tl -> (tl) @ [hd];;

(* 4.6 *)
let rec all_shifts_helper(list, lens)=
    match lens with
    | 1 -> []
    | _ -> one_shift(list)::all_shifts_helper(one_shift(list),lens-1);;

let all_shifts(list) =
    all_shifts_helper(list,List.length list);;

(* 4.7 *)
let all_cases(list) =
    list::all_shifts(list);;
(* 4.8 *)
(* 4.9 *)
